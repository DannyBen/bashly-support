#!/usr/bin/env bash
# This script was generated by bashly (https://github.com/DannyBen/bashly)
# Modifying it manually is not recommended

# :command.root_command
root_command() {
  # :src/root_command.sh
  package="${args[package]}"
  handler="upgrade_$package"
  
  if function_exists "$handler"; then
    $handler
  else
    echo "Invalid package: $package"
    exit 1
  fi
}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
upgrade_tool_usage() {
  if [[ -n $long_usage ]]; then
    printf "upgrade-tool - Upgrade my stuff\n"
    echo 
  else
    printf "upgrade-tool - Upgrade my stuff\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  upgrade-tool [PACKAGE]\n"
  printf "  upgrade-tool --help | -h\n"
  printf "  upgrade-tool --version | -v\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  PACKAGE"
    printf "    Package to upgrade\n"
    printf "    Default: all\n"
    echo

  fi
}

# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.user_lib
# :src/lib/function_exists.sh
function_exists() {
  [[ $(type -t $1) == function ]]
}

# :src/lib/upgrade_all.sh
upgrade_all() {
  echo "=== Upgrading all"
  upgrade_docker
  upgrade_ruby
}

# :src/lib/upgrade_docker.sh
upgrade_docker() {
  echo "=== Upgrading docker"
}

# :src/lib/upgrade_ruby.sh
upgrade_ruby() {
  echo "=== Upgrading ruby"
}

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    upgrade_tool_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="root"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[package]} ]]; then
        args[package]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
  # :command.default_assignments
  [[ -n ${args[package]} ]] || args[package]="all"
  # :command.whitelist_filter
}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
    printf "bash version 4 or higher is required\n"
    exit 1
  fi

  # :src/initialize.sh
  # Code here runs inside the initialize() function
  # Use it for anything that you need to run before any other function, like
  # setting environment vairables:
  # CONFIG_FILE=settings.ini
  #
  # Feel free to empty (but not delete) this file.
}

# :command.run
run() {
  declare -A args
  declare -a other_args
  parse_requirements "$@"

  if [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
