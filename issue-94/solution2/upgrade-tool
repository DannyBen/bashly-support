#!/usr/bin/env bash
# This script was generated by bashly (https://github.com/DannyBen/bashly)
# Modifying it manually is not recommended

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
upgrade_tool_usage() {
  if [[ -n $long_usage ]]; then
    printf "upgrade-tool - Upgrade my stuff\n"
    echo 
  else
    printf "upgrade-tool - Upgrade my stuff\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  upgrade-tool [command]\n"
  printf "  upgrade-tool [command] --help | -h\n"
  printf "  upgrade-tool --version | -v\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  all      Upgrade all"
  echo "  docker   Upgrade docker"
  echo "  ruby     Upgrade ruby"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
upgrade_tool_all_usage() {
  if [[ -n $long_usage ]]; then
    printf "upgrade-tool all - Upgrade all\n"
    echo 
  else
    printf "upgrade-tool all - Upgrade all\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  upgrade-tool all\n"
  printf "  upgrade-tool all --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
upgrade_tool_docker_usage() {
  if [[ -n $long_usage ]]; then
    printf "upgrade-tool docker - Upgrade docker\n"
    echo 
  else
    printf "upgrade-tool docker - Upgrade docker\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  upgrade-tool docker\n"
  printf "  upgrade-tool docker --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
upgrade_tool_ruby_usage() {
  if [[ -n $long_usage ]]; then
    printf "upgrade-tool ruby - Upgrade ruby\n"
    echo 
  else
    printf "upgrade-tool ruby - Upgrade ruby\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  upgrade-tool ruby\n"
  printf "  upgrade-tool ruby --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.command_functions
# :command.function
upgrade_tool_all_command() {
  # :src/all_command.sh
  echo "=== Upgrading all"
  ./upgrade-tool docker
  ./upgrade-tool ruby
}

# :command.function
upgrade_tool_docker_command() {
  # :src/docker_command.sh
  echo "=== Upgrading docker"
}

# :command.function
upgrade_tool_ruby_command() {
  # :src/ruby_command.sh
  echo "=== Upgrading ruby"
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    upgrade_tool_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action=$1
  
  case $action in
  -* )
    ;;
  
  all )
    action="all"
    shift
    upgrade_tool_all_parse_requirements "$@"
    shift $#
    ;;    
  
  docker )
    action="docker"
    shift
    upgrade_tool_docker_parse_requirements "$@"
    shift $#
    ;;    
  
  ruby )
    action="ruby"
    shift
    upgrade_tool_ruby_parse_requirements "$@"
    shift $#
    ;;    
  
  # :command.command_fallback
  * )
    upgrade_tool_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.parse_requirements
upgrade_tool_all_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    upgrade_tool_all_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="all"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.parse_requirements
upgrade_tool_docker_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    upgrade_tool_docker_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="docker"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.parse_requirements
upgrade_tool_ruby_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    upgrade_tool_ruby_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="ruby"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
    printf "bash version 4 or higher is required\n"
    exit 1
  fi

  # :src/initialize.sh
  # Code here runs inside the initialize() function
  # Use it for anything that you need to run before any other function, like
  # setting environment vairables:
  # CONFIG_FILE=settings.ini
  #
  # Feel free to empty (but not delete) this file.
}

# :command.run
run() {
  declare -A args
  declare -a other_args
  parse_requirements "$@"

  if [[ $action == "all" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      upgrade_tool_all_usage
    else
      upgrade_tool_all_command
    fi
  
  elif [[ $action == "docker" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      upgrade_tool_docker_usage
    else
      upgrade_tool_docker_command
    fi
  
  elif [[ $action == "ruby" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      upgrade_tool_ruby_usage
    else
      upgrade_tool_ruby_command
    fi
  
  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
